<div class="container">
    <!-- New Task -->
    <h3>New Task</h3>
    <EditForm Model="@_newTask" OnValidSubmit="AddNewTask" FormName="NewTask">
        <DataAnnotationsValidator/>
        <ValidationSummary />
        <div>
            <div class="mt-3">
                <InputSelect id="people" @bind-Value="@_newTask.PersonId" class="form-control">
                    <option value="0" selected disabled>(Select Person)</option>
                    @foreach (PersonModel person in PersonList)
                    {
                        <option value="@person.Id">@person.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="mt-3">
                <label for"task">Task</label>
                <InputText id="task" @bind-Value="_newTask.Task" class="form-control"></InputText>
            </div>

            <div class="mt-3">
                <label for"percentComplete">Percentage Complete</label>
                <InputNumber id="percentComplete" @bind-Value="_newTask.PercentageComplete" class="form-control"></InputNumber>
            </div>

            <div class="mt-3">
                <label for"dateToBeCompleted">Date to be Completed</label>
                <InputDate id="dateToBeCompleted" bind-format="dd-MM-yyyy" @bind-Value="_newTask.DateToBeCompleted" class="form-control"></InputDate>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Add Task</button>
            </div>
        </div>

    </EditForm>
</div>



@code {
    [Parameter]
    public List<PersonModel> PersonList { get; set; } = new List<PersonModel>();

    [Parameter]
    public EventCallback<TaskModel> OnAddNewTask { get; set; }

    private TaskModel _newTask = new TaskModel();

    private async Task AddNewTask()
    {
        if (_newTask != default)
        {            
            await OnAddNewTask.InvokeAsync(_newTask);
        }
    }
}
